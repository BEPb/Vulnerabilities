'''python:S4426
Cryptographic key generation should be based on strong parameters

Vulnerability
Critical

    Available SinceDec 19, 2023
    SonarQube (Python)
    Constant/issue: 2min

When generating cryptographic keys (or key pairs), it is important to use strong parameters. Key length, for instance, should provide enough entropy against brute-force attacks.

    For RSA and DSA algorithms key size should be at least 2048 bits long
    For ECC (elliptic curve cryptography) algorithms key size should be at least 224 bits long
    For RSA public key exponent should be at least 65537.

This rule raises an issue when a RSA, DSA or ECC key-pair generator is initialized using weak parameters.

It supports the following libraries:

    cryptography
    PyCrypto
    Cryptodome

Noncompliant Code Example'''

from cryptography.hazmat.primitives.asymmetric import rsa, ec, dsa

dsa.generate_private_key(key_size=1024, backend=backend) # Noncompliant
rsa.generate_private_key(public_exponent=999, key_size=2048, backend=backend) # Noncompliant
ec.generate_private_key(curve=ec.SECT163R2, backend=backend)  # Noncompliant

# Compliant Solution

from cryptography.hazmat.primitives.asymmetric import rsa, ec, dsa

dsa.generate_private_key(key_size=2048, backend=backend) # Compliant
rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=backend) # Compliant
ec.generate_private_key(curve=ec.SECT409R1, backend=backend) # Compliant

'''See

    OWASP Top 10 2021 Category A2 - Cryptographic Failures
    OWASP Top 10 2017 Category A3 - Sensitive Data Exposure
    OWASP Top 10 2017 Category A6 - Security Misconfiguration
    ANSSI RGSv2 - Référentiel Général de Sécurité version 2
    NIST FIPS 186-4 - Digital Signature Standard (DSS)
    MITRE, CWE-326 - Inadequate Encryption Strength
'''
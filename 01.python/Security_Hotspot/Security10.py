###### Отключение автоматического экранирования в механизмах шаблонов является чувствительным к безопасности.

'''Точка доступа безопасности
Главный

     Доступно с 19 декабря 2023 г.
     СонарКуб (Python)
     Постоянно/проблема: 5 минут

Чтобы снизить риск атак с использованием межсайтовых сценариев, системы шаблонов, такие как Twig, Django, Smarty, механизм шаблонов Groovy, позволяют настраивать автоматическое экранирование переменных перед отрисовкой шаблонов. При возникновении escape-символов, которые имеют смысл для браузера (например: <a>), будут преобразованы/заменены экранированными/обработанными значениями (например: &lt;a& gt; ).

Автоматическое экранирование не является волшебной функцией, способной уничтожить все атаки с использованием межсайтовых сценариев. Это зависит от применяемой стратегии и контекста. Например, стратегия «автоматического экранирования HTML» (которая только преобразует символы HTML в объекты HTML) не будет работать. актуально, когда переменные используются в атрибуте html, поскольку символ «:» не экранируется и, следовательно, возможна атака, как показано ниже:

<a href="{{ myLink }}">link</a> // myLink = javascript:alert(document.cookie)
<a href="javascript:alert(document.cookie)">link</a> // JS injection (XSS attack)


###### Спросите себя, есть ли

     Шаблоны используются для отображения веб-контента и динамические переменные в шаблонах поступают из ненадежных мест или являются входными данными, контролируемыми пользователем.
     не существует локального механизма для очистки или проверки входных данных.

Существует риск, если вы ответили утвердительно на любой из этих вопросов.
Пример конфиденциального кода
'''
from jinja2 import Environment

env = Environment() # Sensitive: New Jinja2 Environment has autoescape set to false
env = Environment(autoescape=False) # Sensitive:

### Рекомендуемые методы безопасного кодирования

'''Включите автоматическое экранирование по умолчанию и продолжайте проверять использование входных данных, чтобы убедиться, что выбранная стратегия автоматического экранирования является правильной.
Соответствующее решение
'''
from jinja2 import Environment
env = Environment(autoescape=True) # Compliant

'''See

    OWASP Top 10 2021 Category A3 - Injection
    OWASP Cheat Sheet - XSS Prevention Cheat Sheet
    OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS)
    MITRE, CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
'''








###### Жестко закодированные учетные данные чувствительны к безопасности.

Точка доступа безопасности
Блокатор

     Доступно с 19 декабря 2023 г.
     СонарКуб (Python)
     Постоянно/выпуск: 30 мин.

Поскольку строки из исходного или двоичного кода приложения легко извлечь, учетные данные не следует жестко запрограммировать. Это особенно верно для приложений, которые распространяются или имеют открытый исходный код.

В прошлом это приводило к следующим уязвимостям:

     CVE-2019-13466
     CVE-2018-15389

Учетные данные должны храниться вне кода в файле конфигурации, базе данных или службе управления секретами.

Это правило помечает экземпляры жестко запрограммированных учетных данных, используемых в соединениях с базой данных и LDAP. Он ищет жестко запрограммированные учетные данные в строках подключения, а также имена переменных, соответствующие любому из шаблонов из предоставленного списка.

Рекомендуется настроить конфигурацию этого правила, добавив дополнительные учетные слова, такие как «oauthToken», «secret»,…​


###### Спросите себя, есть ли

     Учетные данные позволяют получить доступ к конфиденциальному компоненту, такому как база данных, хранилище файлов, API или служба.
     Учетные данные используются в производственных средах.
     Перед обновлением учетных данных требуется перераспределение приложения.

Существует риск, если вы ответили утвердительно на любой из этих вопросов.
Пример конфиденциального кода

username = 'admin'
password = 'admin' # Sensitive
usernamePassword = 'user=admin&password=admin' # Sensitive





### Рекомендуемые методы безопасного кодирования

     Сохраните учетные данные в файле конфигурации, который не будет отправлен в репозиторий кода.
     Сохраните учетные данные в базе данных.
     Используйте службу своего облачного провайдера для управления секретами.
     Если пароль был раскрыт через исходный код: измените его.

Соответствующее решение

import os

username = os.getenv("username") # Compliant
password = os.getenv("password") # Compliant
usernamePassword = 'user=%s&password=%s' % (username, password) # Compliant{code}

See


Топ-10 OWASP 2021 г., Категория A7 — Сбои идентификации и аутентификации
     Топ-10 OWASP 2017 г., категория A2 — нарушенная аутентификация
     MITRE, CWE-798 — Использование жестко закодированных учетных данных
     MITRE, CWE-259 — Использование жестко запрограммированного пароля
     SANS Top 25 — пористая защита
     Получено из правила FindSecBugs. Жестко закодированный пароль.

    OWASP Top 10 2021 Category A7 - Identification and Authentication Failures
    OWASP Top 10 2017 Category A2 - Broken Authentication
    MITRE, CWE-798 - Use of Hard-coded Credentials
    MITRE, CWE-259 - Use of Hard-coded Password
    SANS Top 25 - Porous Defenses
    Derived from FindSecBugs rule Hard Coded Password










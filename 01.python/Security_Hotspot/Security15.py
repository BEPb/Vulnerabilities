###### Шифрование данных важно для безопасности

Точка доступа безопасности
Критический
Устарело

     Доступно с 19 декабря 2023 г.
     СонарКуб (Python)

Шифрование данных чувствительно к безопасности. В прошлом это приводило к следующим уязвимостям:

     CVE-2017-7902
     CVE-2006-1378
     CVE-2003-1376

Правильное шифрование требует, чтобы и алгоритм шифрования, и ключ были надежными. Очевидно, что закрытый ключ должен оставаться секретным и регулярно обновляться. Однако это не единственные способы обойти или ослабить шифрование.

Это правило помечает вызовы функций, которые инициируют шифрование/дешифрование.
Устарело

Это правило устарело; вместо этого используйте S4426, S5542, S5547.

###### Спросите себя, есть ли

     закрытый ключ может быть не случайным, недостаточно надежным или один и тот же ключ может использоваться повторно в течение длительного времени.
     закрытый ключ может быть скомпрометирован. Это может произойти, если он хранится в небезопасном месте или когда он был передан небезопасным образом.
     обмен ключами производится без надлежащей аутентификации получателя.
     алгоритм шифрования недостаточно силен для требуемого уровня защиты. Обратите внимание, что надежность алгоритмов шифрования снижается с течением времени.
     выбранная библиотека шифрования считается небезопасной.
     используется одноразовый номер, и одно и то же значение используется повторно несколько раз, или одноразовый номер не является случайным.
     используется алгоритм RSA, и он не включает оптимальное асимметричное заполнение шифрования (OAEP), которое могло бы ослабить шифрование.
     Для шифрования используется алгоритм CBC (Cypher Block Chaining), а его IV (вектор инициализации) не генерируется с использованием безопасного случайного алгоритма или используется повторно.
     алгоритм шифрования Advanced Encryption Standard (AES) используется в незащищенном режиме. Дополнительные сведения см. в рекомендуемых методах.

Вы находитесь в группе риска, если ответили утвердительно хотя бы на один из этих вопросов.
Пример конфиденциального кода

cryptography module

from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305, AESGCM, AESCCM
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.ciphers import Cipher


def encrypt(key):
    Fernet(key)  # Sensitive
    ChaCha20Poly1305(key)  # Sensitive
    AESGCM(key)  # Sensitive
    AESCCM(key)  # Sensitive


private_key = rsa.generate_private_key()  # Sensitive


def encrypt2(algorithm, mode, backend):
    Cipher(algorithm, mode, backend)  # Sensitive

pynacl library

from nacl.public import Box
from nacl.secret import SecretBox


def public_encrypt(secret_key, public_key):
    Box(secret_key, public_key)  # Sensitive


def secret_encrypt(key):
    SecretBox(key)  # Sensitive




### Recommended Secure Coding Practices

   Рекомендуемые методы безопасного кодирования

     Генерируйте ключи шифрования, используя безопасные случайные алгоритмы.
     При создании криптографических ключей (или пар ключей) важно использовать длину ключа, обеспечивающую достаточную энтропию против атак методом перебора. Для алгоритма Blowfish длина ключа должна быть не менее 128 бит, а для алгоритма RSA — не менее 2048 бит.
     Регулярно восстанавливайте ключи.
     Всегда храните ключи в безопасном месте и передавайте их только по безопасным каналам.
     Если происходит обмен криптографическими ключами, сначала проверьте личность получателя.
     Используйте только надежные алгоритмы шифрования. Регулярно проверяйте, что алгоритм по-прежнему считается безопасным. Также крайне важно, чтобы они были правильно реализованы. Используйте только те библиотеки шифрования, которые считаются безопасными. Не создавайте собственные алгоритмы шифрования, поскольку они, скорее всего, будут иметь недостатки.
     Когда используется одноразовый номер, каждый раз генерируйте его случайным образом.
     При использовании алгоритма RSA включите оптимальное асимметричное заполнение шифрования (OAEP).
     Когда CBC используется для шифрования, IV должен быть случайным и непредсказуемым. В противном случае зашифрованное значение подвергается атакам криптоанализа, таким как «Атаки с выбранным открытым текстом». Таким образом, следует использовать безопасный случайный алгоритм. Значение IV должно быть связано с одним и только одним циклом шифрования, поскольку цель IV — гарантировать, что один и тот же открытый текст, зашифрованный дважды, даст два разных зашифрованных текста.
     Алгоритм шифрования Advanced Encryption Standard (AES) может использоваться в различных режимах. Режим Галуа/Счетчика (GCM) без заполнения следует отдавать предпочтение следующим незащищенным комбинациям:
         Режим электронной кодовой книги (ECB): под заданным ключом любой блок открытого текста всегда шифруется в один и тот же блок зашифрованного текста. Таким образом, он плохо скрывает шаблоны данных. В некотором смысле он не обеспечивает серьёзной конфиденциальности сообщений и вообще не рекомендуется для использования в криптографических протоколах.
         Цепочка блоков шифра (CBC) с заполнением PKCS#5 (или PKCS#7) подвержена атакам оракула с заполнением.

See

    OWASP Top 10 2017 Category A3 - Sensitive Data Exposure
    OWASP Top 10 2017 Category A6 - Security Misconfiguration
    MITRE, CWE-321 - Use of Hard-coded Cryptographic Key
    MITRE, CWE-322 - Key Exchange without Entity Authentication
    MITRE, CWE-323 - Reusing a Nonce, Key Pair in Encryption
    MITRE, CWE-324 - Use of a Key Past its Expiration Date
    MITRE, CWE-325 - Missing Required Cryptographic Step
    MITRE, CWE-326 - Inadequate Encryption Strength
    MITRE, CWE-327 - Use of a Broken or Risky Cryptographic Algorithm
    SANS Top 25 - Porous Defenses















###### Динамически исполняемый код чувствителен к безопасности.

Точка доступа безопасности
Критический
Устарело

     Доступно с 19 декабря 2023 г.
     СонарКуб (Python)
     Постоянно/выпуск: 30 мин.

Динамическое выполнение кода чувствительно к безопасности. В прошлом это приводило к следующим уязвимостям:

     CVE-2017-9807
     CVE-2017-9802

Некоторые API позволяют выполнять динамический код, предоставляя его в виде строк во время выполнения. Эти API могут быть полезны в некоторых очень специфических случаях использования метапрограммирования. Однако в большинстве случаев их использование не одобряется, поскольку они также увеличивают риск злонамеренного внедрения кода. Такие атаки могут запускаться либо на сервере, либо на клиенте (пример: XSS-атака) и оказывать огромное влияние на безопасность приложения.

Это правило помечает для проверки каждый случай выполнения такого динамического кода. Это правило не обнаруживает внедрения кода. Он лишь подчеркивает использование API, которые следует использовать экономно и очень осторожно.
###### Спросите себя, есть ли

     исполняемый код может быть получен из ненадежного источника и не был очищен.
     вам действительно нужно запускать код динамически.

Существует риск, если вы ответили утвердительно на любой из этих вопросов.
Пример конфиденциального кода

import os

value = input()
command = 'os.system("%s")' % value

def evaluate(command, file, mode):
    eval(command)  # Sensitive.

eval(command)  # Sensitive. Dynamic code

def execute(code, file, mode):
    exec(code)  # Sensitive.
    exec(compile(code, file, mode))  # Sensitive.

exec(command)  # Sensitive.


### Рекомендуемые методы безопасного кодирования

Что касается выполнения неизвестного кода, лучшее решение — не запускать код, предоставленный ненадежным источником. Если вам действительно это нужно, запустите код в изолированной среде. Используйте тюрьмы, брандмауэры и любые средства, которые предоставляет ваша операционная система и язык программирования (пример: менеджеры безопасности в Java, iframe и политика одного и того же происхождения для javascript в веб-браузере).

Не пытайтесь создать черный список опасного кода. Таким образом невозможно охватить все атаки.

По возможности избегайте использования API динамического кода. Жестко закодированный код всегда безопаснее.

See

    OWASP Top 10 2021 Category A3 - Injection
    OWASP Top 10 2017 Category A1 - Injection
    MITRE, CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')













###### Отправка электронных писем важна с точки зрения безопасности

'''Точка доступа безопасности
Критический
Устарело

     Доступно с 19 декабря 2023 г.
     СонарКуб (Python)

Отправка электронной почты чувствительна к безопасности и может подвергнуть приложение множеству уязвимостей.

Информационное воздействие

Электронные письма часто содержат конфиденциальную информацию, которая может быть доступна злоумышленнику, если он сможет добавить произвольный адрес в список получателей.

Спам/фишинг

Злоумышленник может злоупотребить функцией электронной почты для рассылки спама или фишингового контента.

Внедрение опасного контента

Электронные письма могут содержать код HTML и JavaScript, поэтому их можно использовать для XSS-атак.

Внедрение заголовков электронной почты

Поля электронной почты, такие как «тема», «кому», «копия», «скрытая копия», «от», устанавливаются в «заголовках» электронной почты. Использование непроверенного пользовательского ввода для установки этих полей может позволить злоумышленникам вставлять символы новой строки в заголовки для создания неверных SMTP-запросов. Хотя современные библиотеки по умолчанию фильтруют символы новой строки, пользовательские данные, используемые в «заголовках» электронной почты, всегда должны проверяться.

В прошлом это приводило к следующим уязвимостям:

     CVE-2017-9801
     CVE-2016-4803

Устарело

Это правило устарело и со временем будет удалено.


###### Спросите себя, есть ли

     Непроверенный пользовательский ввод используется для установки заголовков электронной почты.
     Содержимое электронной почты содержит данные, предоставленные пользователями, и не очищается.
     Список получателей электронной почты или текст сообщения основаны на введенных пользователем данных.

Вы находитесь в группе риска, если ответили утвердительно хотя бы на один из этих вопросов.
Пример конфиденциального кода


smtplib'''

import smtplib

def send(from_email, to_email, msg):
  server = smtplib.SMTP('localhost', 1025)
  server.sendmail(from_email, to_email, msg) # Sensitive

# Django

from django.core.mail import send_mail

def send(subject, msg, from_email, to_email):
  send_mail(subject, msg, from_email, [to_email]) # Sensitive

# Flask-Mail

from flask import Flask
from flask_mail import Mail, Message

app = Flask(__name__)

def send(subject, msg, from_email, to_email):
    mail = Mail(app)
    msg = Message(subject, [to_email], body, sender=from_email)
    mail.send(msg) # Sensitive{code}





### Рекомендуемые методы безопасного кодирования
'''
     Используйте библиотеку электронной почты, которая очищает заголовки (Flask-Mail или django.core.mail).
     Используйте escape-функции HTML, чтобы очистить каждый фрагмент данных, используемый в теле электронного письма.
     Проверьте логику приложения, чтобы убедиться, что функция базы электронной почты не может быть злоупотреблена:
         Отправьте произвольное электронное письмо для рассылки спама или ловли рыбы.
         Раскрывать конфиденциальное содержимое электронной почты

Видеть

     Электронная инъекция
     Топ-10 OWASP 2017 г. Категория A1 – Инъекции
     MITRE, CWE-93 — Неправильная нейтрализация последовательностей CRLF («инъекция CRLF»)
     MITRE, CWE-80 — неправильная нейтрализация HTML-тегов, связанных со скриптами, на веб-странице (базовый XSS)
     SANS Top 25 — небезопасное взаимодействие между компонентами'''

###### Имена хостов серверов должны проверяться во время соединений SSL/TLS.

Уязвимость
Критический

     Доступно с 19 декабря 2023 г.
     СонарКьюб (Java)
     Постоянно/проблема: 5 минут

Чтобы установить соединение SSL/TLS, неуязвимое для атак «человек посередине», важно убедиться, что сервер предоставляет правильный сертификат.

Данные имени хоста сертификата должны совпадать с именем хоста сервера.

Не рекомендуется изобретать велосипед, реализуя собственную проверку имени хоста.

Библиотеки TLS/SSL предоставляют встроенные функции проверки имени хоста, которые следует использовать.

Это правило вызывает проблему, когда:

     Метод HostnameVerifier.verify() всегда возвращает true
     JavaMail.javax.mail.Session создается с объектом Properties, не имеющим mail.smtp.ssl.checkserveridentity или mail.smtps.ssl.checkserveridentity, для которого не установлено значение true
     org.apache.commons.mail.SimpleEmail Apache Common Emails используется с setSSLOnConnect(true) или setStartTLSEnabled(true) или setStartTLSRquired(true) без вызова setSSLCheckServerIdentity(true)

Пример несовместимого кода

URL url = new URL("https://example.org/");
HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
urlConnection.setHostnameVerifier(new HostnameVerifier() {
  @Override
  public boolean verify(String requestedHost, SSLSession remoteServerSession) {
    return true;  // Noncompliant
  }
});
InputStream in = urlConnection.getInputStream();

SimpleEmail example:

Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email
email.send();

JavaMail’s example:

Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory"); // Noncompliant; Session is created without having "mail.smtp.ssl.checkserveridentity" set to true
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});

Compliant Solution

URL url = new URL("https://example.org/");
HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
// Compliant; Use the default HostnameVerifier
InputStream in = urlConnection.getInputStream();

SimpleEmail example:

Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true);
email.setSSLCheckServerIdentity(true); // Compliant
email.send();

JavaMail’s example:

Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
props.put("mail.smtp.ssl.checkserveridentity", true); // Compliant
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});

See

    OWASP Top 10 2021 Category A2 - Cryptographic Failures
    OWASP Top 10 2021 Category A5 - Security Misconfiguration
    OWASP Top 10 2021 Category A7 - Identification and Authentication Failures
    OWASP Top 10 2017 Category A6 - Security Misconfiguration
    MITRE, CWE-295 - Improper Certificate Validation
    Derived from FindSecBugs rule WEAK_HOSTNAME_VERIFIER

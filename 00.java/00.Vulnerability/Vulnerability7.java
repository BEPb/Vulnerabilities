###### Анализаторы XML не должны допускать включение произвольных файлов.

Уязвимость
Блокатор

     Доступно с 19 декабря 2023 г.
     СонарКьюб (Java)
     Постоянно/выпуск: 15 мин.

Стандарт XML позволяет включать файлы XML с помощью элемента xinclude.

Процессоры XML заменят элемент xinclude содержимым файла, расположенного по URI, определенному в атрибуте href, возможно, из внешнего хранилища, такого как файловая система или сеть, что может привести, если не установлены ограничения, к произвольному файлу. раскрытие информации или уязвимости подделки запросов на стороне сервера (SSRF).
Пример несовместимого кода

For DocumentBuilder, SAXParser, XMLInput, Transformer and Schema JAPX factories:

factory.setXIncludeAware(true); // Noncompliant
// or
factory.setFeature("http://apache.org/xml/features/xinclude", true); // Noncompliant

For Dom4j library:

SAXReader xmlReader = new SAXReader();
xmlReader.setFeature("http://apache.org/xml/features/xinclude", true); // Noncompliant

For Jdom2 library:

SAXBuilder builder = new SAXBuilder();
builder.setFeature("http://apache.org/xml/features/xinclude", true); // Noncompliant

Compliant Solution

Xinclude is disabled by default and can be explicitely disabled like below.

For DocumentBuilder, SAXParser, XMLInput, Transformer and Schema JAPX factories:

factory.setXIncludeAware(false);
// or
factory.setFeature("http://apache.org/xml/features/xinclude", false);

For Dom4j library:

SAXReader xmlReader = new SAXReader();
xmlReader.setFeature("http://apache.org/xml/features/xinclude", false);

For Jdom2 library:

SAXBuilder builder = new SAXBuilder();
builder.setFeature("http://apache.org/xml/features/xinclude", false);

Exceptions

This rule does not raise issues when Xinclude is enabled with a custom EntityResolver:

For DocumentBuilderFactory:

DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
factory.setXIncludeAware(true);
// ...
DocumentBuilder builder = factory.newDocumentBuilder();
builder.setEntityResolver((publicId, systemId) -> new MySafeEntityResolver(publicId, systemId));

For SAXBuilder:

SAXBuilder builder = new SAXBuilder();
builder.setFeature("http://apache.org/xml/features/xinclude", true);
builder.setEntityResolver((publicId, systemId) -> new MySafeEntityResolver(publicId, systemId));

For SAXReader:

SAXReader xmlReader = new SAXReader();
xmlReader.setFeature("http://apache.org/xml/features/xinclude", true);
xmlReader.setEntityResolver((publicId, systemId) -> new MySafeEntityResolver(publicId, systemId));

For XMLInputFactory:

XMLInputFactory factory = XMLInputFactory.newInstance();
factory.setProperty("http://apache.org/xml/features/xinclude", true);
factory.setXMLResolver(new MySafeEntityResolver());

See

    Oracle Java Documentation - XML External Entity Injection Attack
    OWASP Top 10 2017 Category A4 - XML External Entities (XXE)
    OWASP XXE Prevention Cheat Sheet
    MITRE, CWE-611 - Information Exposure Through XML External Entity Reference
    MITRE, CWE-827 - Improper Control of Document Type Definition

###### Шаблоны URL-адресов «HttpSecurity» должны быть правильно упорядочены.

Уязвимость
Критический

     Доступно с 19 декабря 2023 г.
     СонарКьюб (Java)
     Постоянная/проблема: 10 мин.

Шаблоны URL-адресов, настроенные в методе HttpSecurity.authorizeRequests(), рассматриваются в том порядке, в котором они были объявлены. Легко допустить ошибку и объявить менее строгую конфигурацию перед более строгой. Поэтому необходимо пересмотреть порядок объявлений «antMatchers». /** должен быть последним, если он объявлен.

Это правило вызывает проблему, когда:

     Шаблону предшествует другой, который заканчивается на ** и имеет то же начало. Например: /page*-admin/db/** стоит после /page*-admin/**
     Шаблону без подстановочных знаков предшествует другой соответствующий шаблон. Например: /page-index/db идет после /page*/**.

Пример несовместимого кода

  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
      .antMatchers("/resources/**", "/signup", "/about").permitAll() // Compliant
      .antMatchers("/admin/**").hasRole("ADMIN")
      .antMatchers("/admin/login").permitAll() // Noncompliant; the pattern "/admin/login" should appear before "/admin/**"
      .antMatchers("/**", "/home").permitAll()
      .antMatchers("/db/**").access("hasRole('ADMIN') and hasRole('DBA')") // Noncompliant; the pattern "/db/**" should occurs before "/**"
      .and().formLogin().loginPage("/login").permitAll().and().logout().permitAll();
  }

Compliant Solution

  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
      .antMatchers("/resources/**", "/signup", "/about").permitAll() // Compliant
      .antMatchers("/admin/login").permitAll()
      .antMatchers("/admin/**").hasRole("ADMIN") // Compliant
      .antMatchers("/db/**").access("hasRole('ADMIN') and hasRole('DBA')")
      .antMatchers("/**", "/home").permitAll() // Compliant; "/**" is the last one
      .and().formLogin().loginPage("/login").permitAll().and().logout().permitAll();
  }

See

    OWASP Top 10 2021 Category A1 - Broken Access Control
    OWASP Top 10 2017 Category A6 - Security Misconfiguration







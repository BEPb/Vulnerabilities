###### Подписи XML должны быть надежно проверены.

Уязвимость
Главный

     Доступно с 19 декабря 2023 г.
     СонарКьюб (Java)
     Постоянно/выпуск: 15 мин.

Проверка подписи XML осуществляется путем анализа сторонних данных, которым нельзя доверять до тех пор, пока они не будут фактически проверены.

Как и любой другой процесс анализа, неограниченная проверка сторонних XML-подписей может привести к уязвимостям безопасности. В этом случае угрозы варьируются от отказа в обслуживании до нарушения конфиденциальности.

По умолчанию API цифровой подписи Java XML не применяет ограничений на проверку подписи XML, если только приложение не запускается с менеджером безопасности.
Чтобы защитить приложение от этих уязвимостей, установите для атрибута org.jcp.xml.dsig.secureValidation значение true с помощью метода javax.xml.crypto.dsig.dom.DOMValidateContext.setProperty.
Этот атрибут гарантирует, что код применяет следующие ограничения:

     Запрещает использование преобразований XSLT.
     Ограничивает количество элементов SignedInfo или Manifest Reference до 30 или меньше.
     Ограничивает количество эталонных преобразований до 5 или меньше.
     Запрещает использование подписей, связанных с MD5, или алгоритмов MAC.
     Гарантирует уникальность идентификаторов ссылок, что помогает предотвратить атаки с использованием упаковки подписи.
     Запрещает ссылочные URI типа http, https или file.
     Не позволяет элементу RetrivalMethod ссылаться на другой элемент RetrivalMethod.
     Запрещает ключи RSA или DSA длиной менее 1024 бит.

Пример несовместимого кода

NodeList signatureElement = doc.getElementsByTagNameNS(XMLSignature.XMLNS, "Signature");

XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");
DOMValidateContext valContext = new DOMValidateContext(new KeyValueKeySelector(), signatureElement.item(0)); // Noncompliant
XMLSignature signature = fac.unmarshalXMLSignature(valContext);

boolean signatureValidity = signature.validate(valContext);

Compliant Solution

In order to benefit from this secure validation mode, set the DOMValidateContext’s org.jcp.xml.dsig.secureValidation property to TRUE.

NodeList signatureElement = doc.getElementsByTagNameNS(XMLSignature.XMLNS, "Signature");

XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");
DOMValidateContext valContext = new DOMValidateContext(new KeyValueKeySelector(), signatureElement.item(0));
valContext.setProperty("org.jcp.xml.dsig.secureValidation", Boolean.TRUE);
XMLSignature signature = fac.unmarshalXMLSignature(valContext);

boolean signatureValidity = signature.validate(valContext);

See

    Oracle Java Documentation - XML Digital Signature API Overview and Tutorial
    OWASP Top 10 2017 Category A3 - Sensitive Data Exposure
    MITRE, CWE-347 - Improper Verification of Cryptographic Signature






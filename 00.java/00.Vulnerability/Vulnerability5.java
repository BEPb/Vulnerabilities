###### Парсеры XML не должны быть уязвимы для атак XXE.

Уязвимость
Блокатор

     Доступно с 19 декабря 2023 г.
     СонарКьюб (Java)
     Постоянно/выпуск: 15 мин.

Стандарт XML позволяет использовать сущности, объявленные в DOCTYPE документа, которые могут быть внутренними или внешними.

При анализе файла XML содержимое внешних объектов извлекается из внешнего хранилища, такого как файловая система или сеть, что может привести, если не установлены ограничения, к произвольному раскрытию файлов или подделке запросов на стороне сервера (SSRF). ) уязвимости.

Рекомендуется ограничить разрешение внешних объектов, используя одно из следующих решений:

     Если DOCTYPE не требуется, полностью отключите все объявления DOCTYPE.
     Если внешние сущности не нужны, полностью отключите их объявления.
     Если необходимы внешние сущности, то:
         Используйте функции процессора XML, если они доступны, для авторизации только необходимых протоколов (например, https).
         И используйте преобразователь сущностей (и, при необходимости, каталог XML), чтобы разрешать только доверенные сущности. == Пример несовместимого кода


For DocumentBuilder, SAXParser, XMLInput, Transformer and Schema JAPX factories:

DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant

SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant

XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant

TransformerFactory factory = javax.xml.transform.TransformerFactory.newInstance();  // Noncompliant

SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  // Noncompliant

For Dom4j library:

SAXReader xmlReader = new SAXReader(); // Noncompliant

For Jdom2 library:

SAXBuilder builder = new SAXBuilder(); // Noncompliant

Compliant Solution

For DocumentBuilder, SAXParser, XMLInput, Transformer and Schema JAPX factories:

DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
// to be compliant, completely disable DOCTYPE declaration:
factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
// or completely disable external entities declarations:
factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
// or prohibit the use of all protocols by external entities:
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
// or disable entity expansion but keep in mind that this doesn't prevent fetching external entities
// and this solution is not correct for OpenJDK < 13 due to a bug: https://bugs.openjdk.java.net/browse/JDK-8206132
factory.setExpandEntityReferences(false);


SAXParserFactory factory = SAXParserFactory.newInstance();
// to be compliant, completely disable DOCTYPE declaration:
factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
// or completely disable external entities declarations:
factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
// or prohibit the use of all protocols by external entities:
SAXParser parser = factory.newSAXParser(); // Noncompliant
parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
parser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");

XMLInputFactory factory = XMLInputFactory.newInstance();
// to be compliant, completely disable DOCTYPE declaration:
factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
// or completely disable external entities declarations:
factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);
// or prohibit the use of all protocols by external entities:
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");

TransformerFactory factory = javax.xml.transform.TransformerFactory.newInstance();
// to be compliant, prohibit the use of all protocols by external entities:
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");

SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
// to be compliant, completely disable DOCTYPE declaration:
factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
// or prohibit the use of all protocols by external entities:
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");

For Dom4j library:

SAXReader xmlReader = new SAXReader();
xmlReader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);

For Jdom2 library:

SAXBuilder builder = new SAXBuilder();
builder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
builder.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");

See

    OWASP Top 10 2021 Category A5 - Security Misconfiguration
    Oracle Java Documentation - XML External Entity Injection Attack
    OWASP Top 10 2017 Category A4 - XML External Entities (XXE)
    OWASP XXE Prevention Cheat Sheet
    MITRE, CWE-611 - Information Exposure Through XML External Entity Reference
    MITRE, CWE-827 - Improper Control of Document Type Definition




"SecureRandom" seeds should not be predictable

Vulnerability
Critical

    Available SinceDec 19, 2023
    SonarQube (Java)
    Constant/issue: 2min

The java.security.SecureRandom class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it with a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the SecureRandom implementation.

This rule raises an issue when SecureRandom.setSeed() or SecureRandom(byte[]) are called with a seed that is either one of:

    a constant
    the system time

Noncompliant Code Example

SecureRandom sr = new SecureRandom();
sr.setSeed(123456L); // Noncompliant
int v = sr.next(32);

sr = new SecureRandom("abcdefghijklmnop".getBytes("us-ascii")); // Noncompliant
v = sr.next(32);

Compliant Solution

SecureRandom sr = new SecureRandom();
int v = sr.next(32);

See

    OWASP Top 10 2021 Category A2 - Cryptographic Failures
    OWASP Top 10 2017 Category A6 - Security Misconfiguration
    MITRE, CWE-330 - Use of Insufficiently Random Values
    MITRE, CWE-332 - Insufficient Entropy in PRNG
    MITRE, CWE-336 - Same Seed in Pseudo-Random Number Generator (PRNG)
    MITRE, CWE-337 - Predictable Seed in Pseudo-Random Number Generator (PRNG)
    CERT, MSC63J. - Ensure that SecureRandom is properly seeded

###### Java: S5324
Доступ к внешнему хранилищу Android важен с точки зрения безопасности

Точка доступа безопасности
Критический

     Доступно с 19 декабря 2023 г.
     СонарКьюб (Java)

Локальное хранение данных — обычная задача для мобильных приложений. К таким данным относятся, помимо прочего, файлы. Одним из удобных способов хранения файлов является использование внешнего хранилища файлов, которое обычно предлагает больший объем дискового пространства по сравнению с внутренним хранилищем.

Файлы, созданные во внешнем хранилище, доступны для чтения и записи глобально. Таким образом, вредоносное приложение, имеющее разрешения WRITE_EXTERNAL_STORAGE или READ_EXTERNAL_STORAGE, может попытаться прочитать конфиденциальную информацию из файлов, которые другие приложения сохранили во внешнем хранилище.

Внешнее хранилище также может быть удалено пользователем (например, если оно основано на SD-карте), что сделает файлы недоступными для приложения.

###### Спросите себя, есть ли

Ваше приложение использует внешнее хранилище для:

     хранить файлы, содержащие конфиденциальные данные.
     хранить файлы, которые не предназначены для совместного использования с другими приложениями.
     хранить файлы, которые имеют решающее значение для работы приложения.

Существует риск, если вы ответили утвердительно на любой из этих вопросов.
Пример конфиденциального кода

import android.content.Context;

public class AccessExternalFiles {

    public void accessFiles(Context context) {
        context.getExternalFilesDir(null); // Sensitive
    }
}

###### Рекомендуемые методы безопасного кодирования

     По возможности используйте внутреннюю память, поскольку система запрещает другим приложениям доступ к этому местоположению.
     Используйте внешнее хранилище только в том случае, если вам необходимо поделиться неконфиденциальными файлами с другими приложениями.
     Если вашему приложению приходится использовать внешнее хранилище для хранения конфиденциальных данных, убедитесь, что оно шифрует файлы с помощью EncryptedFile.
     Данные, поступающие из внешнего хранилища, всегда следует считать недоверенными и подлежат проверке.
     Поскольку некоторые внешние хранилища можно удалить, никогда не храните на них файлы, которые имеют решающее значение для удобства использования вашего приложения.

Соответствующее решение

import android.content.Context;

public class AccessExternalFiles {

    public void accessFiles(Context context) {
        context.getFilesDir();
    }
}

See

    OWASP Top 10 2021 Category A4 - Insecure Design
    Android Security tips on external file storage
    Mobile AppSec Verification Standard - Data Storage and Privacy Requirements
    OWASP Mobile Top 10 2016 Category M2 - Insecure Data Storage
    MITRE, CWE-312 - Cleartext Storage of Sensitive Information
    SANS Top 25 - Risky Resource Management
    SANS Top 25 - Porous Defenses
